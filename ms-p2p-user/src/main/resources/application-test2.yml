server:
  port: 9010
eureka:
  instance:
    preferIpAddress: true
    instance-id: ${spring.cloud.client.ipAddress}:${server.port}
  client:
    serviceUrl:
      defaultZone: http://localhost:8001/eureka/
logging:
#  file: /LOG/logs/framework/user/${spring.application.name}.log
  file: /LOG/logs/p2p/user/mylog.txt
  level: debug
spring:
  zipkin:
    base-url: http://localhost:8003/
  output:
    ansi:
      enabled: always
  devtools:
    restart:
      enabled: false
  jpa:
    database: mysql
    show-sql: true
  #Hibernate ddl auto (validate|create|create-drop|update)
    hibernate:
      ddl-auto: none
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        show-sql: true
        dialect: org.hibernate.dialect.MySQL5Dialect
  datasource:
    write:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://maxscale.uat.doitglotech.cloud:3388/doit_p2p_new?characterEncoding=utf8&useSSL=false
      username: p2p_user
      password: 4YBGYe5hHb
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中的最小生存时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql将无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
        # 合并多个DruidDataSource的监控数据
        #useGlobalDataSourceStat=true
    read:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://maxscale.uat.doitglotech.cloud:3388/doit_p2p_new?characterEncoding=utf8&useSSL=false
      username: p2p_user
      password: 4YBGYe5hHb
      # 初始化大小，最小，最大
      initialSize: 5
      minIdle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中的最小生存时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql将无法统计，'wall'用于防火墙
      filters: stat,wall,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
        # 合并多个DruidDataSource的监控数据
        #useGlobalDataSourceStat=true
  data:
    mongodb:
      host: mongo-A-01.uat.doitglotech.cloud
      port: 37837
      authentication-database: doitp2p
      username: doitP2Puser
      password: doitP2Ppwd
  redis:
    database: 5
    host: redis-A-01.uat.doitglotech.cloud
    port: 26379
    pool:
      max-active: 8
      max-idle: 10
      min-idle: 0
      max-wait: 100000
    password: doit2019
  kafka:
    producer:
      retries: 0
      batch-size: 16384
      buffer-memory: 33554432
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      defaultKey-serializer: org.apache.kafka.common.serialization.StringSerializer
      bootstrap-servers: 172.17.59.227:9092
    consumer:
      bootstrap-servers: 172.17.59.227:9092
      group-id: foo
      auto-offset-reset: earliest
      enable-auto-commit: true
      auto-commit-interval: 100
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      defaultKey-deserializer: org.apache.kafka.common.serialization.StringDeserializer

third:
    advance:
       #accessKey: 7fedec835807752c
       #secretKey: 588ff85a56f2562c
       accessKey: invalid_key
       secretKey: invalid_secret
       apiHost: https://api.advance.ai
       identityCheckApi: /advance_api/openapi/anti-fraud/v2/identity-check

management:
#  context-path: /manage
  security:
    enabled: true
    roles: ADMIN
  port: 9011

endpoints:
  mappings:
    sensitive: false
  shutdown:
    enabled: true

des:
  file:
    path: /LOG/doitcert/des-dev.cer

HttpUrl:
  smsUrl: http://invalid_url.doitglotech.co.id/sms/send
  smsVerifyUrl: http://invalid_url.doitglotech.co.id/sms/login/verify #:8899/sms/login/verify
SmsChannelType:
  type: TWILIO
count:
    smsCount: 2
framework:
  common:
    i18nOpen: true
    captchaLength: 4
    send-sms-captcha: false

control:
  password: 1234567890